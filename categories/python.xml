<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WifiCIDR Blog (Posts about python)</title><link>https://blog.wificidr.net/</link><description></description><atom:link href="https://blog.wificidr.net/categories/python.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:djustice@wificidr.net"&gt;Daniel Justice&lt;/a&gt; </copyright><lastBuildDate>Mon, 09 Sep 2019 19:00:35 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>NTC Rosetta and YANG for Dummies Tutorial</title><link>https://blog.wificidr.net/posts/ntc-rosetta-and-yang-for-dummies-tutorial/</link><dc:creator>Daniel Justice</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="YANG-for-Dummies!"&gt;YANG for Dummies!&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/ntc-rosetta-and-yang-for-dummies-tutorial/#YANG-for-Dummies!"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Most people are excited to hear about the new projects from NetworkToCode, but quickly discover that there are a lot of moving parts that present a steep learning curve.  Community contributions will be critical to the success and adoption of these projects.  The groundwork has already been laid for IOS and JunOS drivers, so I want to document the path to onboarding completely new drivers.  This is standalone work that you can replicate without making changes to upstream libraries.  I'll demonstrate this based on David Barroso's great article titled &lt;a href="https://napalm-automation.net/yang-for-dummies/"&gt;"YANG for dummies"&lt;/a&gt;.  Most of the setup files for this tutorial were plagarized from ntc-rosetta.  I am definitely standing on the backs of giants!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;To play along with this notebook, first run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:dgjustice/ntc-dummies.git &amp;amp;&amp;amp; cd ntc-dummies
make build_test_containter
make jupyter&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then open your browser to &lt;a href="https://blog.wificidr.net/posts/ntc-rosetta-and-yang-for-dummies-tutorial/localhost:8888"&gt;localhost:8888&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's start by creating some file structure...  (This is already done in the container)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create yang model in &lt;code&gt;data/yang/dummies/models/star-wars/napalm-star-wars.yang&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;dummies
└── models
   ├── napalm-star-wars
   │  └── napalm-star-wars.yang
   └── napalm-star-wars-library.json&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Copied from &lt;a href="https://napalm-automation.net/yang-for-dummies/"&gt;Napalm-Automation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create the library file (&lt;strong&gt;minus the comment&lt;/strong&gt;): &lt;code&gt;cat napalm-star-wars-library.json&lt;/code&gt;
&lt;pre&gt;&lt;code&gt;{
    "ietf-yang-library:modules-state": {
        "module-set-id": "6bd894f2-9168-484e-a0bf-f3ed38d864f9",
        "module": [
            {
                "name": "napalm-star-wars",
                "revision": "2019-08-31",  # &amp;lt;- This key *must* be present, see RFC8040
                "conformance-type": "implement"
            }
        ]
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;a href="https://tools.ietf.org/html/rfc8040"&gt;RFC8040&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;head napalm-star-wars.yang&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// module name
module napalm-star-wars {

    // boilerplate
    yang-version "1";
    namespace "https://napalm-yang.readthedocs.io/yang/napalm-star-wars";

    prefix "napalm-star-wars";
    revision "2019-08-31" {  # &amp;lt;- This *must* match the revision above.
      description
          "initial version";
      reference "0.0.1";
    }
    ...&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="The-dummy-device"&gt;The dummy device&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/ntc-rosetta-and-yang-for-dummies-tutorial/#The-dummy-device"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Our dummy device is going to implement configuration through YAML files.  That's absurd you say!  YAML is a horrible format!  I don't disagree, but it's suitable for pet examples and it lives up to the "dummy" device name.  A more practical example might be to parse a text file for device configuration or interface state.  If you are using something like textfsm, you will end up with a dictionary just like the following example.  The end goal regardless of the input is to start our parsing process with some kind of structured data - most commonly JSON/Python dictionaries.  This could be easily replicated with a dictionary returned from a TextFSM process, for example.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;"""Read a file and return the text.&lt;/span&gt;
&lt;span class="sd"&gt;    &lt;/span&gt;
&lt;span class="sd"&gt;    This method will be attached to our parser as a helper below."""&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"data/star_wars/universe.yml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;---
universe:
  individuals:
  - affiliation: REBEL_ALLIANCE
    age: 57
    name: Obi-Wan Kenobi
  - affiliation: REBEL_ALLIANCE
    age: 19
    name: Luke Skywalker
  - affiliation: EMPIRE
    age: 42
    name: Darth Vader
  - affiliation: REBEL_ALLIANCE
    age: 896
    name: Yoda
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="The-parser"&gt;The parser&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/ntc-rosetta-and-yang-for-dummies-tutorial/#The-parser"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This is the code that will parse the model.  Please refer to &lt;a href="https://yangify.readthedocs.io/en/latest/tutorials/parsing-quickstart/parsing-quickstart.html"&gt;the official Yangify docs&lt;/a&gt; for a complete explanation and walkthrough.  Also see existing implementations at the &lt;a href="https://github.com/networktocode/ntc-rosetta"&gt;ntc-rosetta&lt;/a&gt; Github page.  As you are developing and debugging your own parsers, keep in mind that &lt;code&gt;pdb&lt;/code&gt; is your friend!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ruamel.yaml&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YAML&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ntc_rosetta.helpers&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;json_helpers&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;jh&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;yangify&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;yangify.parser.text_tree&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse_indented_config&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;yangify.parser&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ParserData&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_yaml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;yaml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YAML&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;config_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;config_data&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IndividualData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Yangify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParserData&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/napalm-star-wars:individual"&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extract_elements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]]]:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;jh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"individuals"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;native&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="s2"&gt;"individual"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;native&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;age&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;native&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"affiliation"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;native&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Universe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Yangify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ParserData&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/napalm-star-wars:universe"&lt;/span&gt;

    &lt;span class="n"&gt;individual&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IndividualData&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DummyParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RootParser&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    DummyParser expects as native data a dictionary where the `universe`&lt;/span&gt;
&lt;span class="sd"&gt;    key is reserved for the device configuration.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Yangify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParserData&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root_native&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to_yaml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root_native&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;native&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root_native&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"universe"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;universe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Universe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="The-driver"&gt;The driver&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/ntc-rosetta-and-yang-for-dummies-tutorial/#The-driver"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We need to register the driver with rosetta so we can make use of some its utility methods.  &lt;strong&gt;We'll need to overload the &lt;code&gt;get_datamodel&lt;/code&gt; function so we can load our custom models.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="YANG-models"&gt;YANG models&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/ntc-rosetta-and-yang-for-dummies-tutorial/#YANG-models"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;ntc-rosetta is a framework, so we are able to bring-our-own-yang models to the party.  Simply tell yangson where to find the data, and we're off to the races (or the next step of debugging)!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [4]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ntc_rosetta.drivers.base&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Driver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;yangson.datamodel&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DataModel&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt;

&lt;span class="c1"&gt;# This part looks just like the ios and junos drivers in ntc-rosetta&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DummyDriverNapalmStarWars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Driver&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DummyParser&lt;/span&gt;
    &lt;span class="n"&gt;translator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;datamodel_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"napalm_star_wars"&lt;/span&gt;
    
    &lt;span class="c1"&gt;# These are the overloads.  Please see the file structure and notes&lt;/span&gt;
    &lt;span class="c1"&gt;# in the introduction&lt;/span&gt;
    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_data_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;DataModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/ntc_dummies/data/yang"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;lib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;joinpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"dummies/models/napalm-star-wars-library.json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;joinpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"dummies/models/napalm-star-wars"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;DataModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    
    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_datamodel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;DataModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_datamodel&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_datamodel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_data_model&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_datamodel&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Check-the-datamodel"&gt;Check the datamodel&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/ntc-rosetta-and-yang-for-dummies-tutorial/#Check-the-datamodel"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Let's take a peek at the YANG model to make sure the above worked correctly&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [5]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# If everything worked&lt;/span&gt;
&lt;span class="n"&gt;dummy_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DummyDriverNapalmStarWars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Let's see if we properly loaded the DataModel from the new YANG file&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dummy_driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_datamodel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_tree&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;+--rw napalm-star-wars:universe
   +--rw individual* [name]
      +--rw affiliation? &amp;lt;identityref&amp;gt;
      +--rw age? &amp;lt;age(uint16)&amp;gt;
      +--rw name &amp;lt;string&amp;gt;

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Parse-it"&gt;Parse it&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/ntc-rosetta-and-yang-for-dummies-tutorial/#Parse-it"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Finally, we should be able to parse our "configuration" file and get a yang datamodel of our star-wars characters!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [6]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;config_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Alternate options&lt;/span&gt;
&lt;span class="c1"&gt;# my_universe = DummyParser(dummy_driver.get_datamodel(), native=config_data)&lt;/span&gt;
&lt;span class="c1"&gt;# print(my_universe.process().raw_value())&lt;/span&gt;

&lt;span class="n"&gt;parsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dummy_driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;native&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_value&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;{
    "napalm-star-wars:universe": {
        "individual": [
            {
                "name": "Obi-Wan Kenobi",
                "age": 57,
                "affiliation": "napalm-star-wars:REBEL_ALLIANCE"
            },
            {
                "name": "Luke Skywalker",
                "age": 19,
                "affiliation": "napalm-star-wars:REBEL_ALLIANCE"
            },
            {
                "name": "Darth Vader",
                "age": 42,
                "affiliation": "napalm-star-wars:EMPIRE"
            },
            {
                "name": "Yoda",
                "age": 896,
                "affiliation": "napalm-star-wars:REBEL_ALLIANCE"
            }
        ]
    }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="We-did-it!"&gt;We did it!&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/ntc-rosetta-and-yang-for-dummies-tutorial/#We-did-it!"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;At this point, we have a populated data model that we can manipulate using Yangson.  For a deeper dive into manipulating populated data models, please see my other &lt;a href="https://ntc-rosetta.readthedocs.io/en/latest/tutorials/rosetta_and_yangson_walkthrough.html#Manipulating-models-with-Rosetta-and-Yangson"&gt;tutorial at the ntc-rosetta project&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="Do-I-need-to-use-Rosetta?"&gt;Do I need to use Rosetta?&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/ntc-rosetta-and-yang-for-dummies-tutorial/#Do-I-need-to-use-Rosetta?"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Strictly speaking, no.  You can look at the commented lines in the previous cell for an alternative route (you'll have to separate the &lt;code&gt;get_datamodel&lt;/code&gt; method).  Rosetta is an interface that nicely binds these dependencies together, but your particular use case may have different requirements.&lt;/p&gt;
&lt;h3 id="Translate-it"&gt;Translate it&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/ntc-rosetta-and-yang-for-dummies-tutorial/#Translate-it"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This about wraps up the story.  We'll write a simple translator to spit out yaml back out into a "native config" format.  Keep in mind that this is a pet example.  In production, you will need to handle replaces and merges carefully as well as add tests.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [7]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;yangify&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;translator&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;yangify.translator&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Translator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TranslatorData&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;yangify.translator.config_tree&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ConfigTree&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Individual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Translator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Implements /napalm-star-wars:universe&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Yangify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;translator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TranslatorData&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pre_process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new_section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"  - &lt;/span&gt;&lt;span class="si"&gt;{value}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;age&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"    &lt;/span&gt;&lt;span class="si"&gt;{value}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;affiliation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"    &lt;/span&gt;&lt;span class="si"&gt;{value[0]}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Universe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Translator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Yangify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;translator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TranslatorData&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pre_process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new_section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"individuals:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;individual&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Individual&lt;/span&gt;
    
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DummyTranslator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;translator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RootTranslator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Yangify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;translator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TranslatorData&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConfigTree&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root_result&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"---"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"universe:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root_result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;universe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Universe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Validate-the-translation"&gt;Validate the translation&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/ntc-rosetta-and-yang-for-dummies-tutorial/#Validate-the-translation"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;This is a sanity check to see if we're on the right path.  So far, everything looks good.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [8]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# update the driver&lt;/span&gt;
&lt;span class="n"&gt;DummyDriverNapalmStarWars&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DummyTranslator&lt;/span&gt;
&lt;span class="n"&gt;dummy_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DummyDriverNapalmStarWars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Alternate options&lt;/span&gt;
&lt;span class="c1"&gt;# my_universe = DummyTranslator(dummy_driver.get_datamodel(), candidate=parsed.raw_value())&lt;/span&gt;
&lt;span class="c1"&gt;# print(my_universe.process())&lt;/span&gt;

&lt;span class="n"&gt;translated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dummy_driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;candidate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;parsed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_value&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;translated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;---
universe:
individuals:
  - Obi-Wan Kenobi
    57
    REBEL_ALLIANCE
  - Luke Skywalker
    19
    REBEL_ALLIANCE
  - Darth Vader
    42
    EMPIRE
  - Yoda
    896
    REBEL_ALLIANCE

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Play-with-the-model"&gt;Play with the model&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/ntc-rosetta-and-yang-for-dummies-tutorial/#Play-with-the-model"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;At this point, we've built a large pet example.  Does this have any practical merit?  The time I've spent on this surely hopes so!  Why don't we do what we've always wished for in a Star Wars movie - Yoda the &lt;strong&gt;mercenary&lt;/strong&gt;!!!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [10]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;irt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parsed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datamodel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_resource_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/napalm-star-wars:universe/individual=Yoda"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;current_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parsed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;irt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Current Yoda: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_value&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;modify_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;modify_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'affiliation'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'napalm-star-wars:MERCENARY'&lt;/span&gt;

&lt;span class="n"&gt;stub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modify_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Candidate Yoda: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_value&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;stub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;Current Yoda:  {
  "name": "Yoda",
  "age": 896,
  "affiliation": "napalm-star-wars:REBEL_ALLIANCE"
}
Candidate Yoda:  {
  "name": "Yoda",
  "age": 896,
  "affiliation": "napalm-star-wars:MERCENARY"
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_text output_error"&gt;
&lt;pre&gt;
&lt;span class="ansi-red-fg"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ansi-red-fg"&gt;YangTypeError&lt;/span&gt;                             Traceback (most recent call last)
&lt;span class="ansi-green-fg"&gt;&amp;lt;ipython-input-10-d3e1f770506c&amp;gt;&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;      7&lt;/span&gt; stub &lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; current_data&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;update&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;modify_data&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; raw&lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt;&lt;span class="ansi-green-fg"&gt;True&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;      8&lt;/span&gt; print&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;"Candidate Yoda: "&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; json&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;dumps&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;stub&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;raw_value&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; indent&lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt;&lt;span class="ansi-cyan-fg"&gt;2&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;----&amp;gt; 9&lt;/span&gt;&lt;span class="ansi-red-fg"&gt; &lt;/span&gt;stub&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;validate&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;

&lt;span class="ansi-green-fg"&gt;/usr/local/lib/python3.6/site-packages/yangson/instance.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;validate&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(self, scope, ctype)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    334&lt;/span&gt;             YangTypeError&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt; If the value &lt;span class="ansi-green-fg"&gt;is&lt;/span&gt; a scalar of incorrect type&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    335&lt;/span&gt;         """
&lt;span class="ansi-green-fg"&gt;--&amp;gt; 336&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;         &lt;/span&gt;self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;schema_node&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_validate&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;self&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; scope&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; ctype&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    337&lt;/span&gt; 
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    338&lt;/span&gt;     &lt;span class="ansi-green-fg"&gt;def&lt;/span&gt; add_defaults&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;self&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; ctype&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt; ContentType &lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; &lt;span class="ansi-green-fg"&gt;None&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt; &lt;span class="ansi-blue-fg"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="ansi-blue-fg"&gt;"InstanceNode"&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;

&lt;span class="ansi-green-fg"&gt;/usr/local/lib/python3.6/site-packages/yangson/schemanode.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;_validate&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(self, inst, scope, ctype)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    953&lt;/span&gt;         &lt;span class="ansi-blue-fg"&gt;"""Extend the superclass method."""&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    954&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;if&lt;/span&gt; isinstance&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;inst&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; ArrayEntry&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;--&amp;gt; 955&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;             &lt;/span&gt;super&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_validate&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;inst&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; scope&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; ctype&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    956&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;else&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    957&lt;/span&gt;             &lt;span class="ansi-green-fg"&gt;if&lt;/span&gt; scope&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;value &lt;span class="ansi-blue-fg"&gt;&amp;amp;&lt;/span&gt; ValidationScope&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;semantics&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;value&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;

&lt;span class="ansi-green-fg"&gt;/usr/local/lib/python3.6/site-packages/yangson/schemanode.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;_validate&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(self, inst, scope, ctype)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    779&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;if&lt;/span&gt; scope&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;value &lt;span class="ansi-blue-fg"&gt;&amp;amp;&lt;/span&gt; ValidationScope&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;semantics&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;value&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    780&lt;/span&gt;             self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_check_must&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;inst&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;        &lt;span class="ansi-red-fg"&gt;# must expressions&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;--&amp;gt; 781&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;         &lt;/span&gt;super&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_validate&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;inst&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; scope&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; ctype&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    782&lt;/span&gt; 
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    783&lt;/span&gt;     def _default_instance(self, pnode: "InstanceNode", ctype: ContentType,

&lt;span class="ansi-green-fg"&gt;/usr/local/lib/python3.6/site-packages/yangson/schemanode.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;_validate&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(self, inst, scope, ctype)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    475&lt;/span&gt;             self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_check_schema_pattern&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;inst&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; ctype&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    476&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;for&lt;/span&gt; m &lt;span class="ansi-green-fg"&gt;in&lt;/span&gt; inst&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;--&amp;gt; 477&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;             &lt;/span&gt;inst&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_member&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;m&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;validate&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;scope&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; ctype&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    478&lt;/span&gt;         super&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_validate&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;inst&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; scope&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; ctype&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    479&lt;/span&gt; 

&lt;span class="ansi-green-fg"&gt;/usr/local/lib/python3.6/site-packages/yangson/instance.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;validate&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(self, scope, ctype)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    334&lt;/span&gt;             YangTypeError&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt; If the value &lt;span class="ansi-green-fg"&gt;is&lt;/span&gt; a scalar of incorrect type&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    335&lt;/span&gt;         """
&lt;span class="ansi-green-fg"&gt;--&amp;gt; 336&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;         &lt;/span&gt;self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;schema_node&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_validate&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;self&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; scope&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; ctype&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    337&lt;/span&gt; 
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    338&lt;/span&gt;     &lt;span class="ansi-green-fg"&gt;def&lt;/span&gt; add_defaults&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;self&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; ctype&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt; ContentType &lt;span class="ansi-blue-fg"&gt;=&lt;/span&gt; &lt;span class="ansi-green-fg"&gt;None&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt; &lt;span class="ansi-blue-fg"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="ansi-blue-fg"&gt;"InstanceNode"&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;

&lt;span class="ansi-green-fg"&gt;/usr/local/lib/python3.6/site-packages/yangson/schemanode.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;_validate&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(self, inst, scope, ctype)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    779&lt;/span&gt;         &lt;span class="ansi-green-fg"&gt;if&lt;/span&gt; scope&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;value &lt;span class="ansi-blue-fg"&gt;&amp;amp;&lt;/span&gt; ValidationScope&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;semantics&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;value&lt;span class="ansi-blue-fg"&gt;:&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    780&lt;/span&gt;             self&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_check_must&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;inst&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;        &lt;span class="ansi-red-fg"&gt;# must expressions&lt;/span&gt;
&lt;span class="ansi-green-fg"&gt;--&amp;gt; 781&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;         &lt;/span&gt;super&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;_validate&lt;span class="ansi-blue-fg"&gt;(&lt;/span&gt;inst&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; scope&lt;span class="ansi-blue-fg"&gt;,&lt;/span&gt; ctype&lt;span class="ansi-blue-fg"&gt;)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    782&lt;/span&gt; 
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    783&lt;/span&gt;     def _default_instance(self, pnode: "InstanceNode", ctype: ContentType,

&lt;span class="ansi-green-fg"&gt;/usr/local/lib/python3.6/site-packages/yangson/schemanode.py&lt;/span&gt; in &lt;span class="ansi-cyan-fg"&gt;_validate&lt;/span&gt;&lt;span class="ansi-blue-fg"&gt;(self, inst, scope, ctype)&lt;/span&gt;
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    845&lt;/span&gt;                 inst.value not in self.type):
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    846&lt;/span&gt;             raise YangTypeError(inst.json_pointer(), self.type.error_tag,
&lt;span class="ansi-green-fg"&gt;--&amp;gt; 847&lt;/span&gt;&lt;span class="ansi-red-fg"&gt;                                 self.type.error_message)
&lt;/span&gt;&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    848&lt;/span&gt;         if (isinstance(self.type, LinkType) and        # referential integrity
&lt;span class="ansi-green-intense-fg ansi-bold"&gt;    849&lt;/span&gt;                 scope&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;value &lt;span class="ansi-blue-fg"&gt;&amp;amp;&lt;/span&gt; ValidationScope&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;semantics&lt;span class="ansi-blue-fg"&gt;.&lt;/span&gt;value &lt;span class="ansi-green-fg"&gt;and&lt;/span&gt;

&lt;span class="ansi-red-fg"&gt;YangTypeError&lt;/span&gt;: [/napalm-star-wars:universe/individual/3/affiliation] invalid-type: not derived from napalm-star-wars:AFFILIATION&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="What-broke?!"&gt;What broke?!&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/ntc-rosetta-and-yang-for-dummies-tutorial/#What-broke?!"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Nothing!!!  This is by design.  If you'll take a look at the beginning of the article, we only loaded the first Napalm-Star-Wars model.  We &lt;strong&gt;didn't&lt;/strong&gt; load the extended universe.  Fine, we'll simply push him all the way to the dark side.  :)&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [13]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;modify_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'affiliation'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'napalm-star-wars:REBEL_ALLIANCE'&lt;/span&gt;

&lt;span class="n"&gt;stub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modify_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Candidate Yoda: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_value&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;stub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Validated!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;translated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dummy_driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;candidate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;stub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_value&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;translated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;Candidate Yoda:  {
  "name": "Yoda",
  "age": 896,
  "affiliation": "napalm-star-wars:REBEL_ALLIANCE"
}
Validated!
---
universe:
individuals:
  - Obi-Wan Kenobi
    57
    REBEL_ALLIANCE
  - Luke Skywalker
    19
    REBEL_ALLIANCE
  - Darth Vader
    42
    EMPIRE
  - Yoda
    896
    REBEL_ALLIANCE

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Thank-you!"&gt;Thank you!&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/ntc-rosetta-and-yang-for-dummies-tutorial/#Thank-you!"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As I mentioned earlier, I stand on the backs of giants.  Many thanks to Ken Celenza and the folks at Network To Code, David Barroso, and others involved in these community projects!!!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Feedback"&gt;Feedback&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/ntc-rosetta-and-yang-for-dummies-tutorial/#Feedback"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;If you find any errors or want to leave any kind of feedback, feel free to leave a comment as an &lt;a href="https://github.com/dgjustice/dgjustice.github.io/issues"&gt;issue&lt;/a&gt; or find me lurking on the &lt;a href="https://blog.wificidr.net/posts/ntc-rosetta-and-yang-for-dummies-tutorial/slack.networktocode.com"&gt;NTC Slack&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>python</category><guid>https://blog.wificidr.net/posts/ntc-rosetta-and-yang-for-dummies-tutorial/</guid><pubDate>Mon, 09 Sep 2019 15:49:38 GMT</pubDate></item><item><title>PyCon US 2018</title><link>https://blog.wificidr.net/posts/pycon-us-2018/pycon-us-2018/</link><dc:creator>Daniel Justice</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="PyCon-US-2018"&gt;PyCon US 2018&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/pycon-us-2018/pycon-us-2018/#PyCon-US-2018"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I had the amazing opportunity to go to &lt;a href="https://us.pycon.org/2018/"&gt;PyCon&lt;/a&gt; this year, and it was a blast!  I've shared this on Slack, but it warrants a post as I've not written anything since January.&lt;/p&gt;
&lt;h6 id="Needs-improvement"&gt;Needs improvement&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/pycon-us-2018/pycon-us-2018/#Needs-improvement"&gt;¶&lt;/a&gt;&lt;/h6&gt;&lt;p&gt;Starting with this not because I'm a troll, but because I don't want it to be the "final thought".  Honestly, not much.  The food.  The food was not great, but we survived.  The scheduling was a bit wonky (four talks on testing all in the same slot); that's why they record the talks (I have a few hours worth bookmarked on YouTube).&lt;/p&gt;
&lt;h5 id='The-"Meh"'&gt;The "Meh"&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/pycon-us-2018/pycon-us-2018/#The-%22Meh%22"&gt;¶&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;The tutorials.  In the ones I took, they ran at breakneck speed, no time for questions.  It's probably better to watch the videos and follow on your own over a weekend.  I was expecting a little more time for questions and tangents.  I'm currently working my way through the tutorial by &lt;a href="https://youtu.be/uRvTeK5Ndq8"&gt;Chrisy Heaton on Spatial Alalysis&lt;/a&gt;.  So far it's great, and she is running at a deliberate pace.&lt;/p&gt;
&lt;h4 id="The-rest-which-was-all-awesome:"&gt;The rest &lt;em&gt;which was all awesome&lt;/em&gt;:&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/pycon-us-2018/pycon-us-2018/#The-rest-which-was-all-awesome:"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The experience is invaluable.  This community is unlike any other I've been a part of.  "Pythonistas" are passionate about their language and the community transcends many borders and spoken languages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"The talks are recorded, why go?"  Good question, and I was wondering that myself on day 2.  The main reason is that you are a &lt;em&gt;captive audience&lt;/em&gt;.  Leave your laptop in the hotel, go pay attention.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open spaces.  I didn't know what these were until I got there.  They make many of the rooms available to pretty much anyone who wants to organize a pop-up gathering.  There were about 30 folks in the network automation room.  Got some good info on data science, message queues, and other random topics.  It's hit and miss, but some of these were as good as the main presenters themselves.  It's also an informal setting where you can easily speak to folks one-on-one.  See my previous point about meeting people.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lastly, and &lt;em&gt;most importantly&lt;/em&gt;, the people (have I mentioned that yet?):  I can't emphasize this point enough.  If I take nothing else away from this conference, it will be the amazing folks that I met and got to spend time with.  I spoke  with Michael Kennedy &lt;a href="https://talkpython.fm/"&gt;Talk Python podcast&lt;/a&gt;, I got to hear about Dan Bader &lt;a href="https://dbader.org/"&gt;Python Tips and Tricks&lt;/a&gt; getting "kicked" out of Canda (and they didn't even say sorry!), I drank beer with the founders of &lt;a href="https://pybit.es/"&gt;PyBites&lt;/a&gt;, Julian Sequeira and Bob Belderbos, the list goes on.  I spoke with the one of the founders of NumPy, a PhD in electrical engineering, one of the current maintainers of PyPi, ...  Every one of these people made themselves publicly available and welcomed questions and one-on-one interaction, even for n00bs like myself!&lt;/p&gt;
&lt;p&gt;If someone asks me, "Why should I go to PyCon?", my answer is unequivocally to meet other people who share your passion for computer science.  My peers know that I lack people skills, and my biggest takeaway is the relationships I made while on site.  Big thanks to Samuel Moore for facilitating most of those meetings.&lt;/p&gt;
&lt;h4 id="Next-year"&gt;Next year&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/pycon-us-2018/pycon-us-2018/#Next-year"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;What would I do differently?  Skip the tutorials or only do one session each day, not two.  Other blogs will tell you to leave free time in your schedule.  That's great advice; you can't make all the presentations (besides, it's exhausting at some point).&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>pycon</category><category>python</category><guid>https://blog.wificidr.net/posts/pycon-us-2018/pycon-us-2018/</guid><pubDate>Wed, 16 May 2018 21:44:58 GMT</pubDate></item><item><title>Project Euler #6</title><link>https://blog.wificidr.net/posts/project-euler-6/project-euler-6/</link><dc:creator>Daniel Justice</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Project-Euler-problem-6"&gt;Project Euler problem 6&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/project-euler-6/project-euler-6/#Project-Euler-problem-6"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I stumbled across Project Euler (at &lt;a href="https://www.hackerrank.com/contests/projecteuler/challenges/euler006"&gt;HackerRank&lt;/a&gt; or at &lt;a href="https://projecteuler.net/"&gt;Project Euler&lt;/a&gt;) a while back, and it has been a low item on my to-do list for some time.  It can be quite frustrating at first, but I find it rewarding each time I unlock a little piece of the mathematical puzzle.  Of course you can cheat, but that completely defeats the purpose and harms no one but yourself.  I hope I can demonstrate why with this example.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On a side note, HackerRank typically penalizes you for brute force methods.  They force you to really think about the problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://projecteuler.net/problem=6"&gt;Problem 6&lt;/a&gt; asks, "Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum."  In other words, what is 
$$ \big|\big(\sum_1^n n\big)^2 - \big(\sum_1^n n^2\big)\big| $$&lt;/p&gt;
&lt;p&gt;I was already familiar with &lt;a href="http://mathandmultimedia.com/2010/09/15/sum-first-n-positive-integers/"&gt;Gauss's method&lt;/a&gt; of summing the first series of natural numbers.  What I did not know how to do was to sum their squares.  The brute force method will yield a result, but HackerRank will penalize you with a timeout if you go that route.  I chose to dig deeper...&lt;/p&gt;
&lt;h4 id="A-row-of-boxes"&gt;A row of boxes&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/project-euler-6/project-euler-6/#A-row-of-boxes"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Nothing beats a little chair time with pencil and paper.  I suspected a strong link between geometry and the answer to this problem, so I started drawing squares on my graph paper.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://blog.wificidr.net/images/boxes.png" alt=""&gt;&lt;!-- .element height="50%" width="50%" --&gt;&lt;/p&gt;
&lt;p&gt;If you are familiar with &lt;a href="https://www.mathsisfun.com/algebra/triangular-numbers.html"&gt;triangle numbers&lt;/a&gt;, you might notice the pattern of the right edge of each square.  It is the series 1, 3, 6, 10, 15...  It is really fascinating to me how these things relate to one another.  The formula to find the nth triangle number is the same formula to find the sum of a series of natural numbers!&lt;br&gt;
$$ \sum_1^n n=\frac{n(n+1)}{2} $$&lt;/p&gt;
&lt;p&gt;Therefore, to find the area of the enclosing rectangle, we simply multiply the sum from above by our 'n'.  Now, we need to account for all those little strips of triangle numbers that are left over on top of the squares.  I have to admit, I spent quite a bit of time on this one and simply got stuck.  I knew I needed to find another sum, but this time the series is the sum of the triangle numbers themselves.  I needed to find a formula for the series 1, 4, 10, 20, 35...&lt;/p&gt;
&lt;h4 id="Tetrahedral-Numbers"&gt;Tetrahedral Numbers&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/project-euler-6/project-euler-6/#Tetrahedral-Numbers"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;In an attempt to not ruin the learning process, I did an internet search for the mystery series.  I immediately came across this article on &lt;a href="https://en.wikipedia.org/wiki/Tetrahedral_number"&gt;tetrahedral numbers&lt;/a&gt;.  This was my extra quantity!  To find the sum of a series of squares, subtract the (n - 1)th tetrahedral number from the area of the rectangle that overlays the boxes.&lt;/p&gt;
&lt;p&gt;The tetrahedral numbers are easily visualized if you think of a triangular tower of spheres as in this image:&lt;br&gt;
&lt;img src="https://upload.wikimedia.org/wikipedia/commons/8/87/Pyramid_of_35_spheres_animation_original.gif" alt=""&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;By Blotwell [GFDL (http://www.gnu.org/copyleft/fdl.html), CC-BY-SA-3.0 (http://creativecommons.org/licenses/by-sa/3.0/) or GPL (http://www.gnu.org/licenses/gpl.html)], from Wikimedia Commons&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;If you start taking apart the tower, the spheres perfectly fill in the gaps in the stack of rectangles above.  If you get really bored, you can validate this like I did with a bunch of blocks and marbles.  These items are readily available if you have kids.  One last bit worth noting is that we only need (n - 1) tetrahedral numbers because we don't need to fill in the last row.&lt;/p&gt;
&lt;p&gt;Finally, the sum of a series of squares can be found by:
$$ \sum_1^n n^2=n * \frac{n(n+1)}{2} - \frac{(n - 1)(n)(n+1)}{6} $$&lt;/p&gt;
$$ =\frac{n^3+n^2}{2} - \frac{(n^2-n)(n+1)}{6} $$&lt;p&gt;&lt;/p&gt;
$$ =\frac{n^3+n^2}{2} - \frac{n^3+n^2-n^2-n}{6} $$&lt;p&gt;&lt;/p&gt;
$$ =\frac{3(n^3+n^2)}{6} - \frac{n^3-n}{6} $$&lt;p&gt;&lt;/p&gt;
$$ =\frac{3n^3+3n^2-n^3+n}{6} $$&lt;p&gt;&lt;/p&gt;
$$ \sum_1^n n^2=\frac{2n^3+3n^2+n}{6} $$&lt;p&gt;&lt;/p&gt;
&lt;h4 id="Why-does-this-matter?"&gt;Why does this matter?&lt;a class="anchor-link" href="https://blog.wificidr.net/posts/project-euler-6/project-euler-6/#Why-does-this-matter?"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Not to sound overly cliché, but it is easy, often too easy, to find answers to all of our questions at our fingertips.  For example, if you want to cut right to the chase, you could have a look at &lt;a href="http://www.mathblog.dk/project-euler-problem-6/"&gt;this answer&lt;/a&gt;.  Be sure to take a look at the &lt;a href="https://trans4mind.com/personal_development/mathematics/series/sumNaturalSquares.htm"&gt;proof&lt;/a&gt; as well.  Both posts are respectable, but I think they hide the intuition in the formulas.&lt;/p&gt;
&lt;p&gt;In my search for an answer I learned something new, and I also saw the problem in a new light not illustrated at either of the previous links.  Pardon my drawing skills, but imagine the previous image as a stack of cubes, all laid on top of one another pushed to one side.  Here's a top-down view of what I'm describing:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://blog.wificidr.net/images/stacked_boxes.png" alt=""&gt;&lt;!-- .element height="50%" width="50%" --&gt;&lt;/p&gt;
&lt;p&gt;If you imagine the sum of squares as rows of stacked boxes, you can clearly see the relationship between the sum and the tetrahedral numbers from earlier (the missing space to be subtracted)!&lt;/p&gt;
&lt;p&gt;I hope I have encouraged you to dig a little deeper the next time you run across a tricky math problem and to look for a deeper understanding of the fundamental forces that shape it.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>math</category><category>python</category><guid>https://blog.wificidr.net/posts/project-euler-6/project-euler-6/</guid><pubDate>Tue, 23 Jan 2018 02:35:26 GMT</pubDate></item></channel></rss>